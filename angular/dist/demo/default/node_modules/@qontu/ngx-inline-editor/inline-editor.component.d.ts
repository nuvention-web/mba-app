import { OnInit, EventEmitter, ComponentRef, ComponentFactoryResolver, OnDestroy, AfterContentInit } from "@angular/core";
import { ControlValueAccessor, Validator } from "@angular/forms";
import { InlineEditorService } from "./inline-editor.service";
import { InlineConfig } from "./types/inline-configs";
import { InputBase } from "./inputs/input-base";
import { SelectOptions } from "./types/select-options.interface";
import { InlineEditorError } from "./types/inline-editor-error.interface";
import { InlineEditorEvent, Events, ExternalEvent } from "./types/inline-editor-events.class";
import { InlineEditorState, InlineEditorStateOptions } from "./types/inline-editor-state.class";
import { EditOptions } from "./types/edit-options.interface";
import { InputType } from "./types/input-type.type";
export declare class InlineEditorComponent implements OnInit, AfterContentInit, OnDestroy, ControlValueAccessor, Validator {
    protected componentFactoryResolver: ComponentFactoryResolver;
    constructor(componentFactoryResolver: ComponentFactoryResolver);
    service: InlineEditorService;
    state: InlineEditorState;
    currentComponent: ComponentRef<InputBase>;
    events: Events;
    type?: InputType;
    config: InlineConfig;
    onChange: EventEmitter<InlineEditorEvent | any>;
    onSave: EventEmitter<InlineEditorEvent | any>;
    onEdit: EventEmitter<InlineEditorEvent | any>;
    onCancel: EventEmitter<InlineEditorEvent | any>;
    onError: EventEmitter<InlineEditorError | InlineEditorError[]>;
    onEnter: EventEmitter<InlineEditorEvent | any>;
    onEscape: EventEmitter<InlineEditorEvent | any>;
    onKeyPress: EventEmitter<InlineEditorEvent | any>;
    onFocus: EventEmitter<InlineEditorEvent | any>;
    onBlur: EventEmitter<InlineEditorEvent | any>;
    onClick: EventEmitter<InlineEditorEvent | any>;
    private _empty?;
    empty: string | undefined;
    private _checkedText?;
    checkedText: string | undefined;
    private _uncheckedText?;
    uncheckedText: string | undefined;
    private _saveOnEnter?;
    saveOnEnter: boolean | undefined;
    private _saveOnBlur?;
    saveOnBlur: boolean | undefined;
    private _saveOnChange?;
    saveOnChange: boolean | undefined;
    private _editOnClick?;
    editOnClick: boolean | undefined;
    private _cancelOnEscape?;
    cancelOnEscape: boolean | undefined;
    private _hideButtons?;
    hideButtons: boolean | undefined;
    private _disabled?;
    disabled: boolean | undefined;
    private _required?;
    required: boolean | undefined;
    private _onlyValue?;
    onlyValue: boolean | undefined;
    private _placeholder?;
    placeholder: string | undefined;
    private _name?;
    name: string | undefined;
    private _pattern?;
    pattern: string | undefined;
    private _size?;
    size: number | undefined;
    private _min?;
    min: number | undefined;
    private _max?;
    max: number | undefined;
    private _cols?;
    cols: number | undefined;
    private _rows?;
    rows: number | undefined;
    private _options?;
    options: SelectOptions | undefined;
    private subscriptions;
    private componentRef;
    private container;
    private inputInstance;
    private components;
    private refreshNGModel;
    private isEnterKeyPressed;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    validate(): {
        [key: string]: any;
    } | null;
    writeValue(value: any): void;
    registerOnChange(refreshNGModel: (_: any) => void): void;
    registerOnTouched(): void;
    edit({editing, focus, select, event}?: EditOptions): void;
    save({event, state: hotState}: ExternalEvent): void;
    saveAndClose(outsideEvent: ExternalEvent): void;
    cancel(outsideEvent: ExternalEvent): void;
    getHotState(): InlineEditorStateOptions;
    showText(): string;
    private getComponentType(typeName);
    private generateComponent(type);
    private createInputInstance(componentType);
    private removeUndefinedProperties<T>(object);
    private generateSafeConfig();
    private updateConfig(config?, property?, value?);
    private emit(event, data);
}
